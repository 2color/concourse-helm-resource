#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp $TMPDIR/helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload
echo "Resource setup successful."

# Parse parameters
chart=$(jq -r '.params.chart // ""' < $payload)
name_file=$(jq -r '.params.name // ""' < $payload)
values=$(jq -r '.params.values // ""' < $payload)
wait_until_ready=$(jq -r '.params.wait_until_ready // false' < $payload)
debug=$(jq -r '.params.debug // "false"' < $payload)
replace=$(jq -r '.params.replace // "false"' < $payload)
delete=$(jq -r '.params.delete // "false"' < $payload)
if [ -z "$chart" ]; then
  echo "invalid payload (missing chart)"
  exit 1
fi
if [ -n "$name_file" ]; then
  name=`cat $source/$name_file`
else
  name=""
fi


is_deployed() {
  if [ -n "$1" ]; then
    set +e
    helm status $1 | grep "STATUS: DEPLOYED" > /dev/null
    if [ $? = 0 ]; then
      # exists and is deployed
      echo true
    else
      # not deployed at the moment
      echo false
    fi
    set -e
  else
    echo false
  fi
}

helm_install() {
  helm_cmd="helm install"
  if [ -n "$name" ]; then
    helm_cmd="$helm_cmd -n $name"
  fi
  if [ -n "$values" ]; then
    helm_cmd="$helm_cmd -f $values"
  fi
  if [ "$replace" = true ]; then
    helm_cmd="$helm_cmd --replace"
  fi
  if [ "$debug" = true ]; then
    helm_cmd="$helm_cmd --dry-run --debug"
  fi
  logfile="/tmp/log"
  mkdir -p /tmp
  set -x
  $helm_cmd $source/$chart | tee $logfile
  set +x

  # Find the name of the release
  name=`cat $logfile | grep "NAME:" | awk '{print $2}'`
}

# Find the current revision of a helm release
current_revision() {
  revision=`helm history $name | grep "DEPLOYED" | awk '{print $1}'`
  echo $revision
}

helm_upgrade() {
  helm_cmd="helm upgrade $name"
  if [ -n "$values" ]; then
    helm_cmd="$helm_cmd -f $values"
  fi
  if [ "$debug" = true ]; then
    helm_cmd="$helm_cmd --dry-run --debug"
  fi
  logfile="/tmp/log"
  mkdir -p /tmp
  set -x
  $helm_cmd $source/$chart | tee $logfile
  set +x
}

helm_delete() {
  if [ -z "$name" ]; then
    echo "invalid payload (missing name if delete=true)"
    exit 1
  fi
  echo "Deleting the release $name..."
  helm_cmd="helm delete"
  if [ "$debug" = true ]; then
    helm_cmd="$helm_cmd --dry-run --debug"
  fi
  logfile="/tmp/log"
  mkdir -p /tmp
  set -x
  $helm_cmd $name| tee $logfile
  set +x
}


if [ "$delete" = true ]; then
  helm_delete
  result="$(jq -n "{version:{release:\"$name\", deleted: true}}")"
  echo "$result" | jq -s add  >&3
else
  if [ "$(is_deployed $name)" = true ]; then
    echo "Upgrading $name"
    helm_upgrade
  else
    echo "Installing $name"
    helm_install
  fi

  revision=$(current_revision)
  echo "Deployed revision $revision of $name"
  result="$(jq -n "{version:{release:\"$name\", revision:\"$revision\"}}")"
  echo "$result" | jq -s add  >&3
fi

